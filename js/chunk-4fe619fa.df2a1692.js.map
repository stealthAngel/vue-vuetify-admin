{"version":3,"sources":["webpack:///./src/views/components-demo/jsonEditor.vue?f4a0","webpack:///./src/components/JsonEditor/index.vue?31ca","webpack:///src/components/JsonEditor/index.vue","webpack:///./src/components/JsonEditor/index.vue?a79b","webpack:///./src/components/JsonEditor/index.vue?9b45","webpack:///src/views/components-demo/jsonEditor.vue","webpack:///./src/views/components-demo/jsonEditor.vue?5c32","webpack:///./src/views/components-demo/jsonEditor.vue","webpack:///./node_modules/jsonlint/lib/jsonlint.js","webpack:///./src/components/JsonEditor/index.vue?9b03","webpack:///./node_modules/codemirror/addon/lint/lint.js","webpack:///./node_modules/jsonlint/lib/jsonlint.js?5f8f","webpack:///./node_modules/codemirror/addon/lint/json-lint.js","webpack:///./node_modules/script-loader/addScript.js","webpack:///./node_modules/codemirror/mode/javascript/javascript.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","fluid","grid-list-md","row","wrap","d-flex","xs12","value","color","outline","_v","_s","$t","target","href","ref","model","callback","$$v","expression","staticRenderFns","JsonEditorvue_type_template_id_9cdd76c6_scoped_true_render","staticClass","JsonEditorvue_type_template_id_9cdd76c6_scoped_true_staticRenderFns","__webpack_require__","JsonEditorvue_type_script_lang_js_","name","props","data","jsonEditor","watch","_value","editorValue","getValue","setValue","JSON","stringify","mounted","_this","codemirror_default","a","fromTextArea","$refs","textarea","lineNumbers","mode","gutters","theme","lint","on","cm","$emit","methods","components_JsonEditorvue_type_script_lang_js_","component","Object","componentNormalizer","JsonEditor","jsonData","jsonEditorvue_type_script_lang_js_","components","parse","components_demo_jsonEditorvue_type_script_lang_js_","jsonEditor_component","__webpack_exports__","installComponents_default","VAlert","VContainer","VFlex","VLayout","module","exports","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9cdd76c6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9cdd76c6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","mod","CodeMirror","GUTTER_ID","showTooltip","e","content","tt","document","createElement","position","parentNode","off","style","top","Math","max","clientY","offsetHeight","left","clientX","className","appendChild","cloneNode","body","opacity","rm","elt","removeChild","hideTooltip","setTimeout","showTooltipFor","node","tooltip","hide","poll","setInterval","nodeType","host","clearInterval","LintState","options","hasGutter","marked","timeout","onMouseOver","waitingFor","parseOptions","_cm","Function","getAnnotations","clearMarks","state","clearGutter","i","length","clear","makeMarker","labels","severity","multiple","tooltips","marker","inner","getMaxSeverity","b","groupByLine","annotations","lines","ann","line","from","push","annotationTooltip","tip","messageHTML","innerHTML","createTextNode","message","lintAsync","passOptions","id","abort","arg2","operation","updateLinting","startLinting","getHelper","Pos","async","then","issues","annotationsNotSorted","anns","maxSeverity","tipLabel","createDocumentFragment","formatAnnotation","to","markText","__annotation","setGutterMarker","onUpdateLinting","onChange","clearTimeout","delay","popupTooltips","srcElement","test","box","getBoundingClientRect","x","right","y","bottom","spans","findMarksAt","coordsChar","defineOption","val","old","Init","lintOnChange","getWrapperElement","getOption","hasLintGutter","defineExtension","registerHelper","text","found","window","jsonlint","console","error","parser","parseError","str","hash","loc","first_line","first_column","last_line","last_column","src","log","isIE","attachEvent","addEventListener","execScript","eval","call","defineMode","config","parserConfig","type","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","readRegexp","stream","next","escaped","inSet","ret","tp","cont","tokenBase","ch","tokenize","tokenString","match","eat","tokenComment","skipToEnd","expressionAllowed","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","quote","peek","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","cx","context","vars","parseJS","cc","hasOwnProperty","combinator","pop","statement","lex","pass","arguments","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","poplex","expect","wanted","exp","vardef","parenExpr","maybeexpression","maybeelse","functiondef","forspec","enumdef","typename","typeexpr","pattern","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","classExpression","arrayLiteral","contCommasep","objprop","quasi","maybeTarget","me","expr","property","backUp","continueQuasi","targetNoComma","maybeTypeArgs","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","isInterface","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","isContinuedStatement","textAfter","startState","basecolumn","token","sol","indentation","eatSpace","Pass","firstChar","c","closing","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","defineMIME"],"mappings":"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","file":"js/chunk-4fe619fa.df2a1692.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',{attrs:{\"fluid\":\"\",\"grid-list-md\":\"\"}},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"d-flex\":\"\",\"xs12\":\"\"}},[_c('v-alert',{attrs:{\"value\":true,\"color\":\"info\",\"outline\":\"\"}},[_vm._v(\"\\n        JsonEditor \"+_vm._s(_vm.$t('components.baseOn'))+\"\\n        \"),_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/codemirror/CodeMirror\"}},[_vm._v(\"CodeMirrorr\")]),_vm._v(\", lint \"+_vm._s(_vm.$t('components.baseOn'))+\" json-lint\\n      \")])],1),_c('v-flex',{attrs:{\"d-flex\":\"\",\"xs12\":\"\"}},[_c('json-editor',{ref:\"jsonEditor\",model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}})],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"json-editor\"},[_c('textarea',{ref:\"textarea\"})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"json-editor\">\n    <textarea ref=\"textarea\" />\n  </div>\n</template>\n\n<script>\nimport CodeMirror from 'codemirror';\nimport 'codemirror/addon/lint/lint.css';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/rubyblue.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/lint/lint';\nimport 'codemirror/addon/lint/json-lint';\n// eslint-disable-next-line\nrequire('script-loader!jsonlint');\n\nexport default {\n  name: 'JsonEditor',\n  props: ['value'],\n  data() {\n    return {\n      jsonEditor: false\n    };\n  },\n  watch: {\n    value(value) {\n      const editorValue = this.jsonEditor.getValue();\n      if (value !== editorValue) {\n        this.jsonEditor.setValue(JSON.stringify(this.value, null, 2));\n      }\n    }\n  },\n  mounted() {\n    this.jsonEditor = CodeMirror.fromTextArea(this.$refs.textarea, {\n      lineNumbers: true,\n      mode: 'application/json',\n      gutters: ['CodeMirror-lint-markers'],\n      theme: 'rubyblue',\n      lint: true\n    });\n\n    this.jsonEditor.setValue(JSON.stringify(this.value, null, 2));\n    this.jsonEditor.on('change', cm => {\n      this.$emit('changed', cm.getValue());\n      this.$emit('input', cm.getValue());\n    });\n  },\n  methods: {\n    getValue() {\n      return this.jsonEditor.getValue();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.json-editor{\n  height: 100%;\n  position: relative;\n}\n.json-editor >>> .CodeMirror {\n  height: auto;\n  min-height: 300px;\n}\n.json-editor >>> .CodeMirror-scroll{\n  min-height: 300px;\n}\n.json-editor >>> .cm-s-rubyblue span.cm-string {\n  color: #F08047;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=9cdd76c6&scoped=true&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=9cdd76c6&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"9cdd76c6\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <v-container fluid grid-list-md>\n    <v-layout row wrap>\n      <v-flex d-flex xs12>\n        <v-alert\n          :value=\"true\"\n          color=\"info\"\n          outline\n        >\n          JsonEditor {{ $t('components.baseOn') }}\n          <a\n            target=\"_blank\"\n            href=\"https://github.com/codemirror/CodeMirror\"\n          >CodeMirrorr</a>, lint {{ $t('components.baseOn') }} json-lint\n        </v-alert>\n      </v-flex>\n      <v-flex d-flex xs12>\n        <json-editor ref=\"jsonEditor\" v-model=\"value\"/>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n\n<script>\nimport JsonEditor from '@/components/JsonEditor/index.vue';\n\nconst jsonData = '[{\"items\":[{\"market_type\":\"forexdata\",\"symbol\":\"XAUUSD\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"UKOIL\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"CORN\"}],\"name\":\"\"},'\n  + '{\"items\":[{\"market_type\":\"forexdata\",\"symbol\":\"XAUUSD\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"XAGUSD\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"AUTD\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"AGTD\"}],\"name\":\"Precious metal\"},'\n  + '{\"items\":[{\"market_type\":\"forexdata\",\"symbol\":\"CORN\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"WHEAT\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"SOYBEAN\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"SUGAR\"}],\"name\":\"Agricultural products\"},'\n  + '{\"items\":[{\"market_type\":\"forexdata\",\"symbol\":\"UKOIL\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"USOIL\"},'\n  + '{\"market_type\":\"forexdata\",\"symbol\":\"NGAS\"}],\"name\":\"Energy and Chemical\"}]';\n\nexport default {\n  name: 'JsonEditorDemo',\n  components: { JsonEditor },\n  data: () => ({\n    value: JSON.parse(jsonData)\n  })\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./jsonEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./jsonEditor.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./jsonEditor.vue?vue&type=template&id=3a5b102e&\"\nimport script from \"./jsonEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./jsonEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!/home/travis/build/NelsonEAX/vue-vuetify-admin/node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAlert } from 'vuetify/lib'\nimport { VContainer } from 'vuetify/lib'\nimport { VFlex } from 'vuetify/lib'\nimport { VLayout } from 'vuetify/lib'\ninstallComponents(component, {VAlert,VContainer,VFlex,VLayout})\n","module.exports = \"/* Jison generated parser */\\nvar jsonlint = (function(){\\nvar parser = {trace: function trace() { },\\nyy: {},\\nsymbols_: {\\\"error\\\":2,\\\"JSONString\\\":3,\\\"STRING\\\":4,\\\"JSONNumber\\\":5,\\\"NUMBER\\\":6,\\\"JSONNullLiteral\\\":7,\\\"NULL\\\":8,\\\"JSONBooleanLiteral\\\":9,\\\"TRUE\\\":10,\\\"FALSE\\\":11,\\\"JSONText\\\":12,\\\"JSONValue\\\":13,\\\"EOF\\\":14,\\\"JSONObject\\\":15,\\\"JSONArray\\\":16,\\\"{\\\":17,\\\"}\\\":18,\\\"JSONMemberList\\\":19,\\\"JSONMember\\\":20,\\\":\\\":21,\\\",\\\":22,\\\"[\\\":23,\\\"]\\\":24,\\\"JSONElementList\\\":25,\\\"$accept\\\":0,\\\"$end\\\":1},\\nterminals_: {2:\\\"error\\\",4:\\\"STRING\\\",6:\\\"NUMBER\\\",8:\\\"NULL\\\",10:\\\"TRUE\\\",11:\\\"FALSE\\\",14:\\\"EOF\\\",17:\\\"{\\\",18:\\\"}\\\",21:\\\":\\\",22:\\\",\\\",23:\\\"[\\\",24:\\\"]\\\"},\\nproductions_: [0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],\\nperformAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {\\n\\nvar $0 = $$.length - 1;\\nswitch (yystate) {\\ncase 1: // replace escaped characters with actual character\\n          this.$ = yytext.replace(/\\\\\\\\(\\\\\\\\|\\\")/g, \\\"$\\\"+\\\"1\\\")\\n                     .replace(/\\\\\\\\n/g,'\\\\n')\\n                     .replace(/\\\\\\\\r/g,'\\\\r')\\n                     .replace(/\\\\\\\\t/g,'\\\\t')\\n                     .replace(/\\\\\\\\v/g,'\\\\v')\\n                     .replace(/\\\\\\\\f/g,'\\\\f')\\n                     .replace(/\\\\\\\\b/g,'\\\\b');\\n        \\nbreak;\\ncase 2:this.$ = Number(yytext);\\nbreak;\\ncase 3:this.$ = null;\\nbreak;\\ncase 4:this.$ = true;\\nbreak;\\ncase 5:this.$ = false;\\nbreak;\\ncase 6:return this.$ = $$[$0-1];\\nbreak;\\ncase 13:this.$ = {};\\nbreak;\\ncase 14:this.$ = $$[$0-1];\\nbreak;\\ncase 15:this.$ = [$$[$0-2], $$[$0]];\\nbreak;\\ncase 16:this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];\\nbreak;\\ncase 17:this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];\\nbreak;\\ncase 18:this.$ = [];\\nbreak;\\ncase 19:this.$ = $$[$0-1];\\nbreak;\\ncase 20:this.$ = [$$[$0]];\\nbreak;\\ncase 21:this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);\\nbreak;\\n}\\n},\\ntable: [{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],12:1,13:2,15:7,16:8,17:[1,14],23:[1,15]},{1:[3]},{14:[1,16]},{14:[2,7],18:[2,7],22:[2,7],24:[2,7]},{14:[2,8],18:[2,8],22:[2,8],24:[2,8]},{14:[2,9],18:[2,9],22:[2,9],24:[2,9]},{14:[2,10],18:[2,10],22:[2,10],24:[2,10]},{14:[2,11],18:[2,11],22:[2,11],24:[2,11]},{14:[2,12],18:[2,12],22:[2,12],24:[2,12]},{14:[2,3],18:[2,3],22:[2,3],24:[2,3]},{14:[2,4],18:[2,4],22:[2,4],24:[2,4]},{14:[2,5],18:[2,5],22:[2,5],24:[2,5]},{14:[2,1],18:[2,1],21:[2,1],22:[2,1],24:[2,1]},{14:[2,2],18:[2,2],22:[2,2],24:[2,2]},{3:20,4:[1,12],18:[1,17],19:18,20:19},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:23,15:7,16:8,17:[1,14],23:[1,15],24:[1,21],25:22},{1:[2,6]},{14:[2,13],18:[2,13],22:[2,13],24:[2,13]},{18:[1,24],22:[1,25]},{18:[2,16],22:[2,16]},{21:[1,26]},{14:[2,18],18:[2,18],22:[2,18],24:[2,18]},{22:[1,28],24:[1,27]},{22:[2,20],24:[2,20]},{14:[2,14],18:[2,14],22:[2,14],24:[2,14]},{3:20,4:[1,12],20:29},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:30,15:7,16:8,17:[1,14],23:[1,15]},{14:[2,19],18:[2,19],22:[2,19],24:[2,19]},{3:5,4:[1,12],5:6,6:[1,13],7:3,8:[1,9],9:4,10:[1,10],11:[1,11],13:31,15:7,16:8,17:[1,14],23:[1,15]},{18:[2,17],22:[2,17]},{18:[2,15],22:[2,15]},{22:[2,21],24:[2,21]}],\\ndefaultActions: {16:[2,6]},\\nparseError: function parseError(str, hash) {\\n    throw new Error(str);\\n},\\nparse: function parse(input) {\\n    var self = this,\\n        stack = [0],\\n        vstack = [null], // semantic value stack\\n        lstack = [], // location stack\\n        table = this.table,\\n        yytext = '',\\n        yylineno = 0,\\n        yyleng = 0,\\n        recovering = 0,\\n        TERROR = 2,\\n        EOF = 1;\\n\\n    //this.reductionCount = this.shiftCount = 0;\\n\\n    this.lexer.setInput(input);\\n    this.lexer.yy = this.yy;\\n    this.yy.lexer = this.lexer;\\n    if (typeof this.lexer.yylloc == 'undefined')\\n        this.lexer.yylloc = {};\\n    var yyloc = this.lexer.yylloc;\\n    lstack.push(yyloc);\\n\\n    if (typeof this.yy.parseError === 'function')\\n        this.parseError = this.yy.parseError;\\n\\n    function popStack (n) {\\n        stack.length = stack.length - 2*n;\\n        vstack.length = vstack.length - n;\\n        lstack.length = lstack.length - n;\\n    }\\n\\n    function lex() {\\n        var token;\\n        token = self.lexer.lex() || 1; // $end = 1\\n        // if token isn't its numeric value, convert\\n        if (typeof token !== 'number') {\\n            token = self.symbols_[token] || token;\\n        }\\n        return token;\\n    }\\n\\n    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;\\n    while (true) {\\n        // retreive state number from top of stack\\n        state = stack[stack.length-1];\\n\\n        // use default actions if available\\n        if (this.defaultActions[state]) {\\n            action = this.defaultActions[state];\\n        } else {\\n            if (symbol == null)\\n                symbol = lex();\\n            // read action for current state and first input\\n            action = table[state] && table[state][symbol];\\n        }\\n\\n        // handle parse error\\n        _handle_error:\\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\\n\\n            if (!recovering) {\\n                // Report error\\n                expected = [];\\n                for (p in table[state]) if (this.terminals_[p] && p > 2) {\\n                    expected.push(\\\"'\\\"+this.terminals_[p]+\\\"'\\\");\\n                }\\n                var errStr = '';\\n                if (this.lexer.showPosition) {\\n                    errStr = 'Parse error on line '+(yylineno+1)+\\\":\\\\n\\\"+this.lexer.showPosition()+\\\"\\\\nExpecting \\\"+expected.join(', ') + \\\", got '\\\" + this.terminals_[symbol]+ \\\"'\\\";\\n                } else {\\n                    errStr = 'Parse error on line '+(yylineno+1)+\\\": Unexpected \\\" +\\n                                  (symbol == 1 /*EOF*/ ? \\\"end of input\\\" :\\n                                              (\\\"'\\\"+(this.terminals_[symbol] || symbol)+\\\"'\\\"));\\n                }\\n                this.parseError(errStr,\\n                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\\n            }\\n\\n            // just recovered from another error\\n            if (recovering == 3) {\\n                if (symbol == EOF) {\\n                    throw new Error(errStr || 'Parsing halted.');\\n                }\\n\\n                // discard current lookahead and grab another\\n                yyleng = this.lexer.yyleng;\\n                yytext = this.lexer.yytext;\\n                yylineno = this.lexer.yylineno;\\n                yyloc = this.lexer.yylloc;\\n                symbol = lex();\\n            }\\n\\n            // try to recover from error\\n            while (1) {\\n                // check for error recovery rule in this state\\n                if ((TERROR.toString()) in table[state]) {\\n                    break;\\n                }\\n                if (state == 0) {\\n                    throw new Error(errStr || 'Parsing halted.');\\n                }\\n                popStack(1);\\n                state = stack[stack.length-1];\\n            }\\n\\n            preErrorSymbol = symbol; // save the lookahead token\\n            symbol = TERROR;         // insert generic error symbol as new lookahead\\n            state = stack[stack.length-1];\\n            action = table[state] && table[state][TERROR];\\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\\n        }\\n\\n        // this shouldn't happen, unless resolve defaults are off\\n        if (action[0] instanceof Array && action.length > 1) {\\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\\n        }\\n\\n        switch (action[0]) {\\n\\n            case 1: // shift\\n                //this.shiftCount++;\\n\\n                stack.push(symbol);\\n                vstack.push(this.lexer.yytext);\\n                lstack.push(this.lexer.yylloc);\\n                stack.push(action[1]); // push state\\n                symbol = null;\\n                if (!preErrorSymbol) { // normal execution/no error\\n                    yyleng = this.lexer.yyleng;\\n                    yytext = this.lexer.yytext;\\n                    yylineno = this.lexer.yylineno;\\n                    yyloc = this.lexer.yylloc;\\n                    if (recovering > 0)\\n                        recovering--;\\n                } else { // error just occurred, resume old lookahead f/ before error\\n                    symbol = preErrorSymbol;\\n                    preErrorSymbol = null;\\n                }\\n                break;\\n\\n            case 2: // reduce\\n                //this.reductionCount++;\\n\\n                len = this.productions_[action[1]][1];\\n\\n                // perform semantic action\\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\\n                // default location, uses first token for firsts, last for lasts\\n                yyval._$ = {\\n                    first_line: lstack[lstack.length-(len||1)].first_line,\\n                    last_line: lstack[lstack.length-1].last_line,\\n                    first_column: lstack[lstack.length-(len||1)].first_column,\\n                    last_column: lstack[lstack.length-1].last_column\\n                };\\n                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\\n\\n                if (typeof r !== 'undefined') {\\n                    return r;\\n                }\\n\\n                // pop off stack\\n                if (len) {\\n                    stack = stack.slice(0,-1*len*2);\\n                    vstack = vstack.slice(0, -1*len);\\n                    lstack = lstack.slice(0, -1*len);\\n                }\\n\\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\\n                vstack.push(yyval.$);\\n                lstack.push(yyval._$);\\n                // goto new state = table[STATE][NONTERMINAL]\\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\\n                stack.push(newState);\\n                break;\\n\\n            case 3: // accept\\n                return true;\\n        }\\n\\n    }\\n\\n    return true;\\n}};\\n/* Jison generated lexer */\\nvar lexer = (function(){\\nvar lexer = ({EOF:1,\\nparseError:function parseError(str, hash) {\\n        if (this.yy.parseError) {\\n            this.yy.parseError(str, hash);\\n        } else {\\n            throw new Error(str);\\n        }\\n    },\\nsetInput:function (input) {\\n        this._input = input;\\n        this._more = this._less = this.done = false;\\n        this.yylineno = this.yyleng = 0;\\n        this.yytext = this.matched = this.match = '';\\n        this.conditionStack = ['INITIAL'];\\n        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\\n        return this;\\n    },\\ninput:function () {\\n        var ch = this._input[0];\\n        this.yytext+=ch;\\n        this.yyleng++;\\n        this.match+=ch;\\n        this.matched+=ch;\\n        var lines = ch.match(/\\\\n/);\\n        if (lines) this.yylineno++;\\n        this._input = this._input.slice(1);\\n        return ch;\\n    },\\nunput:function (ch) {\\n        this._input = ch + this._input;\\n        return this;\\n    },\\nmore:function () {\\n        this._more = true;\\n        return this;\\n    },\\nless:function (n) {\\n        this._input = this.match.slice(n) + this._input;\\n    },\\npastInput:function () {\\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\\\n/g, \\\"\\\");\\n    },\\nupcomingInput:function () {\\n        var next = this.match;\\n        if (next.length < 20) {\\n            next += this._input.substr(0, 20-next.length);\\n        }\\n        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\\\n/g, \\\"\\\");\\n    },\\nshowPosition:function () {\\n        var pre = this.pastInput();\\n        var c = new Array(pre.length + 1).join(\\\"-\\\");\\n        return pre + this.upcomingInput() + \\\"\\\\n\\\" + c+\\\"^\\\";\\n    },\\nnext:function () {\\n        if (this.done) {\\n            return this.EOF;\\n        }\\n        if (!this._input) this.done = true;\\n\\n        var token,\\n            match,\\n            tempMatch,\\n            index,\\n            col,\\n            lines;\\n        if (!this._more) {\\n            this.yytext = '';\\n            this.match = '';\\n        }\\n        var rules = this._currentRules();\\n        for (var i=0;i < rules.length; i++) {\\n            tempMatch = this._input.match(this.rules[rules[i]]);\\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\\n                match = tempMatch;\\n                index = i;\\n                if (!this.options.flex) break;\\n            }\\n        }\\n        if (match) {\\n            lines = match[0].match(/\\\\n.*/g);\\n            if (lines) this.yylineno += lines.length;\\n            this.yylloc = {first_line: this.yylloc.last_line,\\n                           last_line: this.yylineno+1,\\n                           first_column: this.yylloc.last_column,\\n                           last_column: lines ? lines[lines.length-1].length-1 : this.yylloc.last_column + match[0].length}\\n            this.yytext += match[0];\\n            this.match += match[0];\\n            this.yyleng = this.yytext.length;\\n            this._more = false;\\n            this._input = this._input.slice(match[0].length);\\n            this.matched += match[0];\\n            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);\\n            if (this.done && this._input) this.done = false;\\n            if (token) return token;\\n            else return;\\n        }\\n        if (this._input === \\\"\\\") {\\n            return this.EOF;\\n        } else {\\n            this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\\\n'+this.showPosition(), \\n                    {text: \\\"\\\", token: null, line: this.yylineno});\\n        }\\n    },\\nlex:function lex() {\\n        var r = this.next();\\n        if (typeof r !== 'undefined') {\\n            return r;\\n        } else {\\n            return this.lex();\\n        }\\n    },\\nbegin:function begin(condition) {\\n        this.conditionStack.push(condition);\\n    },\\npopState:function popState() {\\n        return this.conditionStack.pop();\\n    },\\n_currentRules:function _currentRules() {\\n        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\\n    },\\ntopState:function () {\\n        return this.conditionStack[this.conditionStack.length-2];\\n    },\\npushState:function begin(condition) {\\n        this.begin(condition);\\n    }});\\nlexer.options = {};\\nlexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\\n\\nvar YYSTATE=YY_START\\nswitch($avoiding_name_collisions) {\\ncase 0:/* skip whitespace */\\nbreak;\\ncase 1:return 6\\nbreak;\\ncase 2:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 4\\nbreak;\\ncase 3:return 17\\nbreak;\\ncase 4:return 18\\nbreak;\\ncase 5:return 23\\nbreak;\\ncase 6:return 24\\nbreak;\\ncase 7:return 22\\nbreak;\\ncase 8:return 21\\nbreak;\\ncase 9:return 10\\nbreak;\\ncase 10:return 11\\nbreak;\\ncase 11:return 8\\nbreak;\\ncase 12:return 14\\nbreak;\\ncase 13:return 'INVALID'\\nbreak;\\n}\\n};\\nlexer.rules = [/^(?:\\\\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\\\\.[0-9]+)?([eE][-+]?[0-9]+)?\\\\b)/,/^(?:\\\"(?:\\\\\\\\[\\\\\\\\\\\"bfnrt/]|\\\\\\\\u[a-fA-F0-9]{4}|[^\\\\\\\\\\\\0-\\\\x09\\\\x0a-\\\\x1f\\\"])*\\\")/,/^(?:\\\\{)/,/^(?:\\\\})/,/^(?:\\\\[)/,/^(?:\\\\])/,/^(?:,)/,/^(?::)/,/^(?:true\\\\b)/,/^(?:false\\\\b)/,/^(?:null\\\\b)/,/^(?:$)/,/^(?:.)/];\\nlexer.conditions = {\\\"INITIAL\\\":{\\\"rules\\\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\\\"inclusive\\\":true}};\\n\\n\\n;\\nreturn lexer;})()\\nparser.lexer = lexer;\\nreturn parser;\\n})();\\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\\nexports.parser = jsonlint;\\nexports.parse = function () { return jsonlint.parse.apply(jsonlint, arguments); }\\nexports.main = function commonjsMain(args) {\\n    if (!args[1])\\n        throw new Error('Usage: '+args[0]+' FILE');\\n    if (typeof process !== 'undefined') {\\n        var source = require('fs').readFileSync(require('path').join(process.cwd(), args[1]), \\\"utf8\\\");\\n    } else {\\n        var cwd = require(\\\"file\\\").path(require(\\\"file\\\").cwd());\\n        var source = cwd.join(args[1]).read({charset: \\\"utf-8\\\"});\\n    }\\n    return exports.parser.parse(source);\\n}\\nif (typeof module !== 'undefined' && require.main === module) {\\n  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require(\\\"system\\\").args);\\n}\\n}\"","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=9cdd76c6&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=style&index=0&id=9cdd76c6&scoped=true&lang=css&\"","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var GUTTER_ID = \"CodeMirror-lint-markers\";\n\n  function showTooltip(e, content) {\n    var tt = document.createElement(\"div\");\n    tt.className = \"CodeMirror-lint-tooltip\";\n    tt.appendChild(content.cloneNode(true));\n    document.body.appendChild(tt);\n\n    function position(e) {\n      if (!tt.parentNode) return CodeMirror.off(document, \"mousemove\", position);\n      tt.style.top = Math.max(0, e.clientY - tt.offsetHeight - 5) + \"px\";\n      tt.style.left = (e.clientX + 5) + \"px\";\n    }\n    CodeMirror.on(document, \"mousemove\", position);\n    position(e);\n    if (tt.style.opacity != null) tt.style.opacity = 1;\n    return tt;\n  }\n  function rm(elt) {\n    if (elt.parentNode) elt.parentNode.removeChild(elt);\n  }\n  function hideTooltip(tt) {\n    if (!tt.parentNode) return;\n    if (tt.style.opacity == null) rm(tt);\n    tt.style.opacity = 0;\n    setTimeout(function() { rm(tt); }, 600);\n  }\n\n  function showTooltipFor(e, content, node) {\n    var tooltip = showTooltip(e, content);\n    function hide() {\n      CodeMirror.off(node, \"mouseout\", hide);\n      if (tooltip) { hideTooltip(tooltip); tooltip = null; }\n    }\n    var poll = setInterval(function() {\n      if (tooltip) for (var n = node;; n = n.parentNode) {\n        if (n && n.nodeType == 11) n = n.host;\n        if (n == document.body) return;\n        if (!n) { hide(); break; }\n      }\n      if (!tooltip) return clearInterval(poll);\n    }, 400);\n    CodeMirror.on(node, \"mouseout\", hide);\n  }\n\n  function LintState(cm, options, hasGutter) {\n    this.marked = [];\n    this.options = options;\n    this.timeout = null;\n    this.hasGutter = hasGutter;\n    this.onMouseOver = function(e) { onMouseOver(cm, e); };\n    this.waitingFor = 0\n  }\n\n  function parseOptions(_cm, options) {\n    if (options instanceof Function) return {getAnnotations: options};\n    if (!options || options === true) options = {};\n    return options;\n  }\n\n  function clearMarks(cm) {\n    var state = cm.state.lint;\n    if (state.hasGutter) cm.clearGutter(GUTTER_ID);\n    for (var i = 0; i < state.marked.length; ++i)\n      state.marked[i].clear();\n    state.marked.length = 0;\n  }\n\n  function makeMarker(labels, severity, multiple, tooltips) {\n    var marker = document.createElement(\"div\"), inner = marker;\n    marker.className = \"CodeMirror-lint-marker-\" + severity;\n    if (multiple) {\n      inner = marker.appendChild(document.createElement(\"div\"));\n      inner.className = \"CodeMirror-lint-marker-multiple\";\n    }\n\n    if (tooltips != false) CodeMirror.on(inner, \"mouseover\", function(e) {\n      showTooltipFor(e, labels, inner);\n    });\n\n    return marker;\n  }\n\n  function getMaxSeverity(a, b) {\n    if (a == \"error\") return a;\n    else return b;\n  }\n\n  function groupByLine(annotations) {\n    var lines = [];\n    for (var i = 0; i < annotations.length; ++i) {\n      var ann = annotations[i], line = ann.from.line;\n      (lines[line] || (lines[line] = [])).push(ann);\n    }\n    return lines;\n  }\n\n  function annotationTooltip(ann) {\n    var severity = ann.severity;\n    if (!severity) severity = \"error\";\n    var tip = document.createElement(\"div\");\n    tip.className = \"CodeMirror-lint-message-\" + severity;\n    if (typeof ann.messageHTML != 'undefined') {\n        tip.innerHTML = ann.messageHTML;\n    } else {\n        tip.appendChild(document.createTextNode(ann.message));\n    }\n    return tip;\n  }\n\n  function lintAsync(cm, getAnnotations, passOptions) {\n    var state = cm.state.lint\n    var id = ++state.waitingFor\n    function abort() {\n      id = -1\n      cm.off(\"change\", abort)\n    }\n    cm.on(\"change\", abort)\n    getAnnotations(cm.getValue(), function(annotations, arg2) {\n      cm.off(\"change\", abort)\n      if (state.waitingFor != id) return\n      if (arg2 && annotations instanceof CodeMirror) annotations = arg2\n      cm.operation(function() {updateLinting(cm, annotations)})\n    }, passOptions, cm);\n  }\n\n  function startLinting(cm) {\n    var state = cm.state.lint, options = state.options;\n    /*\n     * Passing rules in `options` property prevents JSHint (and other linters) from complaining\n     * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\n     */\n    var passOptions = options.options || options;\n    var getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), \"lint\");\n    if (!getAnnotations) return;\n    if (options.async || getAnnotations.async) {\n      lintAsync(cm, getAnnotations, passOptions)\n    } else {\n      var annotations = getAnnotations(cm.getValue(), passOptions, cm);\n      if (!annotations) return;\n      if (annotations.then) annotations.then(function(issues) {\n        cm.operation(function() {updateLinting(cm, issues)})\n      });\n      else cm.operation(function() {updateLinting(cm, annotations)})\n    }\n  }\n\n  function updateLinting(cm, annotationsNotSorted) {\n    clearMarks(cm);\n    var state = cm.state.lint, options = state.options;\n\n    var annotations = groupByLine(annotationsNotSorted);\n\n    for (var line = 0; line < annotations.length; ++line) {\n      var anns = annotations[line];\n      if (!anns) continue;\n\n      var maxSeverity = null;\n      var tipLabel = state.hasGutter && document.createDocumentFragment();\n\n      for (var i = 0; i < anns.length; ++i) {\n        var ann = anns[i];\n        var severity = ann.severity;\n        if (!severity) severity = \"error\";\n        maxSeverity = getMaxSeverity(maxSeverity, severity);\n\n        if (options.formatAnnotation) ann = options.formatAnnotation(ann);\n        if (state.hasGutter) tipLabel.appendChild(annotationTooltip(ann));\n\n        if (ann.to) state.marked.push(cm.markText(ann.from, ann.to, {\n          className: \"CodeMirror-lint-mark-\" + severity,\n          __annotation: ann\n        }));\n      }\n\n      if (state.hasGutter)\n        cm.setGutterMarker(line, GUTTER_ID, makeMarker(tipLabel, maxSeverity, anns.length > 1,\n                                                       state.options.tooltips));\n    }\n    if (options.onUpdateLinting) options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.lint;\n    if (!state) return;\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function(){startLinting(cm);}, state.options.delay || 500);\n  }\n\n  function popupTooltips(annotations, e) {\n    var target = e.target || e.srcElement;\n    var tooltip = document.createDocumentFragment();\n    for (var i = 0; i < annotations.length; i++) {\n      var ann = annotations[i];\n      tooltip.appendChild(annotationTooltip(ann));\n    }\n    showTooltipFor(e, tooltip, target);\n  }\n\n  function onMouseOver(cm, e) {\n    var target = e.target || e.srcElement;\n    if (!/\\bCodeMirror-lint-mark-/.test(target.className)) return;\n    var box = target.getBoundingClientRect(), x = (box.left + box.right) / 2, y = (box.top + box.bottom) / 2;\n    var spans = cm.findMarksAt(cm.coordsChar({left: x, top: y}, \"client\"));\n\n    var annotations = [];\n    for (var i = 0; i < spans.length; ++i) {\n      var ann = spans[i].__annotation;\n      if (ann) annotations.push(ann);\n    }\n    if (annotations.length) popupTooltips(annotations, e);\n  }\n\n  CodeMirror.defineOption(\"lint\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      clearMarks(cm);\n      if (cm.state.lint.options.lintOnChange !== false)\n        cm.off(\"change\", onChange);\n      CodeMirror.off(cm.getWrapperElement(), \"mouseover\", cm.state.lint.onMouseOver);\n      clearTimeout(cm.state.lint.timeout);\n      delete cm.state.lint;\n    }\n\n    if (val) {\n      var gutters = cm.getOption(\"gutters\"), hasLintGutter = false;\n      for (var i = 0; i < gutters.length; ++i) if (gutters[i] == GUTTER_ID) hasLintGutter = true;\n      var state = cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter);\n      if (state.options.lintOnChange !== false)\n        cm.on(\"change\", onChange);\n      if (state.options.tooltips != false && state.options.tooltips != \"gutter\")\n        CodeMirror.on(cm.getWrapperElement(), \"mouseover\", state.onMouseOver);\n\n      startLinting(cm);\n    }\n  });\n\n  CodeMirror.defineExtension(\"performLint\", function() {\n    if (this.state.lint) startLinting(this);\n  });\n});\n","require(\"!!/home/travis/build/NelsonEAX/vue-vuetify-admin/node_modules/script-loader/addScript.js\")(require(\"!!/home/travis/build/NelsonEAX/vue-vuetify-admin/node_modules/raw-loader/index.js!/home/travis/build/NelsonEAX/vue-vuetify-admin/node_modules/jsonlint/lib/jsonlint.js\"))","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Depends on jsonlint.js from https://github.com/zaach/jsonlint\n\n// declare global: jsonlint\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"lint\", \"json\", function(text) {\n  var found = [];\n  if (!window.jsonlint) {\n    if (window.console) {\n      window.console.error(\"Error: window.jsonlint not defined, CodeMirror JSON linting cannot run.\");\n    }\n    return found;\n  }\n  // for jsonlint's web dist jsonlint is exported as an object with a single property parser, of which parseError\n  // is a subproperty\n  var jsonlint = window.jsonlint.parser || window.jsonlint\n  jsonlint.parseError = function(str, hash) {\n    var loc = hash.loc;\n    found.push({from: CodeMirror.Pos(loc.first_line - 1, loc.first_column),\n                to: CodeMirror.Pos(loc.last_line - 1, loc.last_column),\n                message: str});\n  };\n  try { jsonlint.parse(text); }\n  catch(e) {}\n  return found;\n});\n\n});\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(src) {\n\tfunction log(error) {\n\t\t(typeof console !== \"undefined\")\n\t\t&& (console.error || console.log)(\"[Script Loader]\", error);\n\t}\n\n\t// Check for IE =< 8\n\tfunction isIE() {\n\t\treturn typeof attachEvent !== \"undefined\" && typeof addEventListener === \"undefined\";\n\t}\n\n\ttry {\n\t\tif (typeof execScript !== \"undefined\" && isIE()) {\n\t\t\texecScript(src);\n\t\t} else if (typeof eval !== \"undefined\") {\n\t\t\teval.call(null, src);\n\t\t} else {\n\t\t\tlog(\"EvalError: No eval function available\");\n\t\t}\n\t} catch (error) {\n\t\tlog(error);\n\t}\n}\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\da-f]+|o[0-7]+|b[01]+)n?/i)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:n|(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return ret(\"error\", \"error\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/]/.test(ch)) {\n        return;\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(expression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\" || value == \"in\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetype, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(isTS ? classfield : functiondef, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(isTS ? classfield : functiondef, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"sourceRoot":""}